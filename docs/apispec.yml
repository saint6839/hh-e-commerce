openapi: 3.0.1
info:
  title: E-Commerce API
  description: API for managing e-commerce operations.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3000
    description: Local server
tags:
  - name: user
    description: 사용자
  - name: product
    description: 상품
  - name: order
    description: 주문
  - name: cart
    description: 장바구니

paths:
  /api/v1/users/balance:
    post:
      tags:
        - user
      summary: 사용자 잔액 충전 API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 100
      responses:
        '200':
          description: 사용자 잔액(정보) 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: '사용자 잔액 충전 성공'
        '400':
          description: Invalid request
  /api/v1/users/{userId}:
    get:
      tags:
        - user
      summary: 사용자 잔액(정보) 조회 API
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 사용자 ID
      responses:
        '200':
          description: 사용자 잔액(정보) 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: '사용자 잔액(정보) 조회 성공'
        '404':
          description: User not found
  /orders:
    post:
      tags:
        - order
      summary: 주문 및 결제 API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  properties:
                    userId:
                      type: integer
                      example: 1
                    products:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/Product'
                message:
                  type: string
                  example: '주문 및 결제 성공'

      responses:
        '200':
          description: 주문 및 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request

  /api/v1/products/{productId}:
    get:
      tags:
        - product
      summary: 특정 상품 정보 조회 API
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
          description: 상품 ID
      responses:
        '200':
          description: 특정 상품 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
                  message:
                    type: string
                    example: '특정 상품 조회 성공'
  /api/v1/products/all:
    get:
      tags:
        - product
      summary: 전체 상품 목록 조회 API
      responses:
        '200':
          description: 전체 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  message:
                    type: string
                    example: '전체 상품 목록 조회 성공'
  /api/v1/products/popular:
    get:
      tags:
        - product
      summary: 인기 상품 목록 조회 API
      responses:
        '200':
          description: 인기 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  message:
                    type: string
                    example: '인기 상품 목록 조회 성공'
  /api/v1/carts:
    post:
      tags:
        - cart
      summary: 장바구니에 상품 추가 API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                product:
                  properties:
                    productId:
                      type: integer
                      example: 1
                    quantity:
                      type: integer
                      example: 2
      responses:
        '201':
          description: 장바구니에 상품 추가 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 1
                      cartItem:
                        type: object
                        properties:
                          product:
                            $ref: '#/components/schemas/Product'
                          quantity:
                            type: integer
                            example: 2
                  message:
                    type: string
                    example: '상품이 장바구니에 성공적으로 추가되었습니다.'
  /api/v1/carts/{productId}:
    delete:
      tags:
        - cart
      summary: 장바구니에서 상품 삭제 API
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
          description: 상품 ID
      responses:
        '200':
          description: 장바구니에서 상품 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: '상품이 장바구니에서 성공적으로 삭제되었습니다.'
        '404':
          description: Product not found
  /api/carts/{userId}:
    get:
      tags:
        - cart
      summary: 장바구니 조회 API
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: 사용자 ID
      responses:
        '200':
          description: 장바구니 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          $ref: '#/components/schemas/Product'
                        quantity:
                          type: integer
                          example: 2
                  message:
                    type: string
                    example: '장바구니 조회 성공'
        '404':
          description: Cart not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        balance:
          type: integer

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: integer
        stock:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        totalPrice:
          type: integer
        status:
          type: string
